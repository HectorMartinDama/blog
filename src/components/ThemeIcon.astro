---
import '../../public/sun-and-moon.scss'
---



<button class:list={Astro.props.class} id="themeToggle" aria-label="auto" class="theme-toggle" title="Toggles light & dark" aria-live="polite">
  <svg class="sun-and-moon" aria-hidden="true" width="24" height="24" viewBox="0 0 24 24">
      <circle class="sun" cx="12" cy="12" r="6" mask="url(#moon-mask)" fill="currentColor" />
      <g class="sun-beams" stroke="currentColor">
        <line x1="12" y1="1" x2="12" y2="3" />
        <line x1="12" y1="21" x2="12" y2="23" />
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64" />
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78" />
        <line x1="1" y1="12" x2="3" y2="12" />
        <line x1="21" y1="12" x2="23" y2="12" />
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36" />
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22" />
      </g>
      <mask class="moon" id="moon-mask">
          <rect x="0" y="0" width="100%" height="100%" fill="white" />
          <circle cx="24" cy="10" r="6" fill="black" />
      </mask>
  </svg>
</button>


<style lang="scss">
  #themeToggle{
      --size: 20px;
      --icon-fill: black;
      --icon-fill-hover: black;

      background: none;
      border: none;
      padding:0;
      inline-size: var(--size);
      block-size: var(--size);
      aspect-ratio: 1;
      border-radius: 50%;

      cursor: pointer;
      touch-action: manipulation;
      -webkit-tap-highlight-color: transparent;

      outline-offset: 5px;

      & > svg {
          inline-size: 100%;
          block-size: 100%;
          stroke-linecap: round;
      }

      @nest [data-theme="dark"] & {
          --icon-fill: white;
          --icon-fill-hover: white;
      }

      @media (hover: none) {
          --size: 24px;
      }
  }
</style>

<script is:inline>

    const theme = (() => {
      if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
        return localStorage.getItem('theme');
      }
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'dark';
      }
        return 'light';
    })();
  
    if (theme === 'light') {
      document.documentElement.classList.remove('dark');
    } else {
      document.documentElement.classList.add('dark');
    }
  
    window.localStorage.setItem('theme', theme);
  
    const handleToggleClick = () => {
      const element = document.documentElement;
      element.classList.toggle("dark");

  
      const isDark = element.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    }
     
  

    document.getElementById("themeToggle").addEventListener("click", handleToggleClick, false);

    document.addEventListener("astro:after-swap", function () {
      const element = document.documentElement;
      if(localStorage.getItem('theme') === 'dark'){
        element.classList.toggle("dark");
      }
    });
</script>